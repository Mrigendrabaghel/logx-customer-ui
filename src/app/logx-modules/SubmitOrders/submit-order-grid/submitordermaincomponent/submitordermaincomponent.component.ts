import { Component, OnInit } from '@angular/core';
import { CommonConst, IncidentConst, SubmitOderConst, SubmitorderdetailsConst } from 'src/app/configs/constants';
import { DataTransferService } from 'src/app/logx-services/common/data-transfer.service';
import { generateOrderNumber } from 'src/app/shared/common/common-method';
import { StoreOrderNumberService } from 'src/app/logx-services/common/store-order-number.service';
import { MatDialog } from '@angular/material/dialog';
import { EditOrderNumberConfirmationModal } from '../../edit-orderNumber-confirmation-modal/edit-orderNumber-confirmation-modal.component';
import { SubmitOrderService } from 'src/app/logx-services/submitOrder/submit-order.service';
import { WarningDialogComponent } from '../../warning-dialog/warning-dialog.component';
import { SaveOrderDestination, SaveOriginInformation, ShipwithCreatedByModal } from 'src/app/shared/models/submitOrder/submitOrder.model';
import { orderstepperdetails } from 'src/app/shared/models/submitOrder/submitOrder.model';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import { NavigationEnd, Router } from '@angular/router';
import { NULL_EXPR } from '@angular/compiler/src/output/output_ast';

@Component({
  selector: 'app-submitordermaincomponent',
  templateUrl: './submitordermaincomponent.component.html',
  styleUrls: ['./submitordermaincomponent.component.scss']
})
export class SubmitordermaincomponentComponent implements OnInit {

  orderInformationMessage: string = SubmitorderdetailsConst.ListItems.originInfolistIem;
  destinationInformationMesage: string = SubmitorderdetailsConst.ListItems.destinationInfolistItem;
  orderDetailsMessage: string = SubmitorderdetailsConst.ListItems.orderDetailslistItem;
  orderLineItemsMessage: string = SubmitorderdetailsConst.ListItems.orderLineItems;
  additionalInfoMessage: string = SubmitorderdetailsConst.ListItems.additionalInfo
  SubmitOderConst = SubmitOderConst;
  CommonConst = CommonConst;

  displayOrderLocation = true;
  displayDestinationLocation: boolean = false;
  displayOrderDetails: boolean = false;
  displayOrderLineItems: boolean = false;
  displayAdditionalInfo: boolean = false;
  public orderNumber: any;
  orderId: any;
  formName: string = "Origin";
  public editOrderNumber: boolean = false;
  public isEditMode: boolean = false;
  initialOrderNumber: number;
  updatedOrderNumber: number;
  showEditIcon: boolean = false;
  orderNoErrMessage: any;
  selectedOrderId: number;
  validateOrderNumber: any;
  saveOriginInfo: SaveOriginInformation = <SaveOriginInformation>{};
  saveDestinationInfo: SaveOrderDestination = <SaveOrderDestination>{};
  orderstepperdetails: orderstepperdetails = <orderstepperdetails>{};
  originLocFlag: any;
  destLocFlag: string;
  orderDetailsFlag: string;
  addlInfoFlag: string;
  orderLineFlag: string;
  shipWith = "";
  createdBy = "";
  isSaveCreateLink: Subject<boolean> = new Subject();
  shipwithSessionDetails: ShipwithCreatedByModal;
  isCurrentOrderNum: any;
  previousShipWith: any;
  locationIdOrig: any;

  constructor(private dataTransfer: DataTransferService, private storeOrderNumber: StoreOrderNumberService,
    public dialog: MatDialog, private submitaOrderService: SubmitOrderService,
    private router: Router
    ) { 
      this.isCurrentOrderNum=JSON.parse(JSON.stringify(localStorage.getItem('currentOrderNumber')));
      this.router.events
      .pipe(filter((rs): rs is NavigationEnd => rs instanceof NavigationEnd))
      .subscribe(event => {
        if (
          event.id === 1 &&
          event.url === event.urlAfterRedirects 
        ) {
          this.orderNumber= this.isCurrentOrderNum;
        }
      })

    }

    ngOnChanges() {
      if (this.orderId != null) {
        this.GetOriginLocationDetails();
      }
 
    }
    GetOriginLocationDetails() {
      this.submitaOrderService.GetOriginLocationDetails(this.orderId).subscribe(response => {
        if (response) {
          this.locationIdOrig = response[0].locationIdOrig;
        }
      })
    }

  ngOnInit(): void {
  
    this.fnErrorMessageText();
    this.isSaveCreateLink.next(false);
    this.dataTransfer.obj.subscribe(data => { this.selectedOrderId = data; });
    
    if(!this.selectedOrderId){
      this.selectedOrderId=JSON.parse(JSON.stringify(localStorage.getItem("currentOrderId")));
      ///this.orderNumber= this.isCurrentOrderNum
    }
    this.previousShipWith = JSON.parse(JSON.stringify(localStorage.getItem("previousShipWith")));
    const shipDtls: ShipwithCreatedByModal = JSON.parse(localStorage.getItem('SaveShipWith'));
    if (shipDtls) {
      this.createdBy = shipDtls.createdBy;
      this.shipWith = shipDtls.shipWith;
    }

    if (this.selectedOrderId == null && (this.orderNumber==undefined || this.orderNumber==null)) {
      this.submitaOrderService.GetAutoGeneratedNumber("ORDER").subscribe(response => {
        if (response) {
          this.orderNumber = response.neW_NUMBER;
          if(this.orderNumber==this.previousShipWith ||  this.orderNumber==this.shipWith  || this.orderNumber==this.isCurrentOrderNum){
            this.submitaOrderService.GetAutoGeneratedNumber("ORDER").subscribe(response => {
              if (response) {
                this.orderNumber = response.neW_NUMBER;
                localStorage.removeItem('currentOrderNumber')
                localStorage.setItem('currentOrderNumber', JSON.parse(JSON.stringify(this.orderNumber)));
              }
            });
          }

          localStorage.setItem('currentOrderNumber', JSON.parse(JSON.stringify(this.orderNumber)));
        }
      });
    }
    if (this.selectedOrderId != null) {
      this.orderId = this.selectedOrderId;
      this.submitaOrderService.GetOriginLocationDetails(this.orderId).subscribe(response => {
        if (response) {
          this.orderNumber = response[0].orderNumber;
          this.createdBy = response[0].userIdCreatedBy;
          this.shipWith = response[0].shipwithorder;
          localStorage.setItem('currentOrderNumber', JSON.parse(JSON.stringify(this.orderNumber)));
          localStorage.setItem('currentOrderId', JSON.parse(JSON.stringify(this.selectedOrderId)));
        }
      });
      this.submitaOrderService.GetDestinationLocationDetails(this.orderId).subscribe(response => {
        if (response) {
          this.orderNumber = response[0].orderNumber;
        }
      });
    }

    this.orderId = this.selectedOrderId;
    if (this.orderId != null) {
      this.GetStepperData(this.orderId);
    }
    this.storeOrderNumber.storeExistingOrderNumber = this.storeOrderNumber.storeExistingOrderNumber + 1;
    this.dataTransfer.obj.subscribe(data => {
      if (data == 'fromOrigin') {
        this.onPressDestination();
      } else if (data == 'fromDestination') {
        this.onPressOrderDetails();
      } else if (data == 'fromOrderDetails') {
        this.onPressOrderLineItems();
      } else if (data == 'fromOrderLineItems') {
        this.onPressAdditionalInfo();
      }
    });
  }
 
  GetStepperData(orderId) {
    this.submitaOrderService.stepperNavigation(orderId).subscribe(res => {
      if (res) {
        this.orderstepperdetails = res[0];
        this.originLocFlag = this.orderstepperdetails.originLocFlag;
        this.destLocFlag = this.orderstepperdetails.destLocFlag;
        this.orderDetailsFlag = this.orderstepperdetails.orderDetailsFlag;
        this.orderLineFlag = this.orderstepperdetails.orderLineFlag;
        this.addlInfoFlag = this.orderstepperdetails.addlInfoFlag;

      }
    });
  }

  onPressOriginLocation() {
    this.displayOrderLocation = true;
    this.displayDestinationLocation = false;
    this.displayOrderDetails = false;
    this.displayOrderLineItems = false;
    this.displayAdditionalInfo = false;
    this.formName = "Origin";
    if (this.orderId != null) {
      this.GetStepperData(this.orderId);
    }
  }
  onPressDestination() {
    this.displayOrderLocation = false;
    this.displayOrderDetails = false;
    this.displayOrderLineItems = false;
    this.displayAdditionalInfo = false;
    this.displayDestinationLocation = true;
    this.formName = "Destination";
    if (this.orderId != null) {
      this.GetStepperData(this.orderId);
    }
  }
  onPressOrderDetails() {
    this.displayOrderLocation = false;
    this.displayDestinationLocation = false;
    this.displayOrderDetails = true;
    this.displayOrderLineItems = false;
    this.displayAdditionalInfo = false;
    if (this.orderId != null) {
      this.GetStepperData(this.orderId);
    }
  }
  onPressOrderLineItems() {
    this.displayOrderLocation = false;
    this.displayDestinationLocation = false;
    this.displayOrderDetails = false;
    this.displayOrderLineItems = true;
    this.displayAdditionalInfo = false;
    if (this.orderId != null) {
      this.GetStepperData(this.orderId);
    }
  }
  onPressAdditionalInfo() {
    this.displayOrderLocation = false;
    this.displayDestinationLocation = false;
    this.displayOrderDetails = false;
    this.displayOrderLineItems = false;
    this.displayAdditionalInfo = true;
    if (this.orderId != null) {
      this.GetStepperData(this.orderId);
    }
  }

  saveOrderId(event) {
    this.orderId = event;
  }

  onEditOrderNumber() {
    this.editOrderNumber = true;
    this.isEditMode = true;
    this.showEditIcon = false;
    this.initialOrderNumber = this.orderNumber;
  }

  afterEditingOrderNumber() {
    try {
      this.submitaOrderService.validateOrderNumber(this.orderNumber).subscribe(response => {
        console.log("validate data", response);
        if (response != "Order Does Not Exists") {
          const warningPopup = this.dialog.open(WarningDialogComponent, {
            data: {
              updatedOrderNumber: this.orderNumber,
              buttonText: {
                ok: CommonConst.OK
              }
            }
          });
        } else {
          const afterEdit = this.dialog.open(EditOrderNumberConfirmationModal, {
            data: {
              previousOrderNumber: this.initialOrderNumber,
              updatedOrderNumber: this.orderNumber,
              buttonText: {
                ok: CommonConst.YES,
                cancel: CommonConst.NO
              }
            }
          });
          afterEdit.afterClosed().subscribe(closed => {
            if (closed == true) {
              this.showEditIcon = true;
              this.isEditMode = false;
              localStorage.removeItem("currentOrderNumber");
              localStorage.setItem('currentOrderNumber', JSON.parse(JSON.stringify(this.orderNumber)));
            } else {
              this.isEditMode = false;
              this.orderNumber = this.initialOrderNumber;
             
            }
          })
        }

      });
    }
    catch (error) {
      throw error;
    }
  }


  fnErrorMessageText() {
    this.orderNoErrMessage = IncidentConst.validationMessage.orderNumber;
  }
}
